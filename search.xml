<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1. Two Sum</title>
      <link href="/ivanjo39191.github.io/2019/12/29/1.-Two-Sum/"/>
      <url>/ivanjo39191.github.io/2019/12/29/1.-Two-Sum/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a>1. Two Sum</h2><p><a href="#question">Question</a><br><a href="#question_zh_hant">中文題目</a><br><a href="#answer1">解法</a><br><a href="#think1">思路</a><br><a href="#bigo">Big-O</a><br><a href="#code">代碼</a>  </p><p><a name="question"></a></p><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br>You may assume that each input would have exactly one solution, and you may not use the same element twice.<br>Example:  </p><pre><code>Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1].</code></pre><p><a name="question_zh_hant"></a></p><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>給定一個整數數組 nums 和一個目標值 target，請你在該數組中找出和為目標值的那 兩個 整數，並返回他們的數組下標。<br>你可以假設每種輸入只會對應一個答案。但是，你不能重複利用這個數組中同樣的元素。<br>範例:  </p><pre><code>Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1].</code></pre><p><a name="answer1"></a></p><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><p>這裡會使用到以下兩個方法:<br>list.count()<br>list.index()<br>count() 方法用於統計某個元素在列表中出現的次數。<br>count()方法語法：  </p><pre><code>list.count(obj)</code></pre><p>index() 函數用於從列表中找出某個值第一個匹配項的索引位置。<br>index()方法語法：  </p><pre><code>list . index ( x [, start [, end ]])  </code></pre><p><a name="think1"></a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>解題關鍵:<br>主要是想找到num2 = target - num1，是否也在list中，那麼就需要運用以下兩個方法：<br>num2 in nums，返回True<br>nums.index(num2)，查找num2的索引  </p><p>解題詳解:<br>首先計算 nums 的長度並存入變數<br>宣告變數 j 為 -1，在最後若沒找到 num2 可用 j 是否大於0進行判斷<br>使用 for 迴圈進行遍歷<br>使用 if 判斷 num2 in nums  ，對 list 使用 in 的時間複雜度為 O(n)<br>如果 num2 = num1 ，且 nums 中只出現了一次，說明找到是 num1 本身<br>將此情況使用 if 判斷，再使用 continue 跳過<br>如果不是找到 num1 本身，則將該值存入 j<br>index(x,i+1) 是從 num1 的序列後找 num2，避免重複查找<br>判斷 j 是否大於0，大於0代表有找到 num2，將 i，j 值返回<br>若無找到 num2 則返回空值  </p><p><a name="bigo"></a></p><h3 id="Big-O"><a href="#Big-O" class="headerlink" title="Big-O"></a>Big-O</h3><p> 時間複雜度 O(N^2)<br> 空間複雜度 O(N)  </p><p>Runtime: 800 ms, faster than 30.56% of Python3 online submissions for Two Sum.<br>Memory Usage: 13.7 MB, less than 88.37% of Python3 online submissions for Two Sum.  </p><p><a name="code"></a></p><h3 id="代碼"><a href="#代碼" class="headerlink" title="代碼"></a>代碼</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:</span><br><span class="line">        lens &#x3D; len(nums)</span><br><span class="line">        j &#x3D; -1</span><br><span class="line">        for i in range(lens):</span><br><span class="line">            if (target-nums[i]) in nums:</span><br><span class="line">                if (nums.count(target-nums[i]) &#x3D;&#x3D; 1) &amp; (target-nums[i] &#x3D;&#x3D; nums[i]):</span><br><span class="line">                    continue</span><br><span class="line">                else:</span><br><span class="line">                    j &#x3D; nums.index(target-nums[i], i+1)</span><br><span class="line">                    break</span><br><span class="line">        if j &gt; 0:</span><br><span class="line">            return [i,j]</span><br><span class="line">        else:</span><br><span class="line">            return []</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
